#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "mineSweeper.h"
#include "colorPrint.h"
//returns true upon success
bool initBoard(GameBoard *g, int rows, int cols, int level) {

    if( level<=0|| level>=4   ){
        printf(" please enter LEVEL number: ");
        return FALSE;
    }
//  if row or col is small then 0 create default board 20 * 20.
    if( rows<1|| cols<1 ){
        rows = 20;
        cols = 20;
    }
//  initialize the objects for the game.    
    g->rows = rows;
    g->cols = cols;
    g->totalMines = 0;
    g->isMineClicked = 0;
    g->hiddenTiles = rows*cols;
    g->board = (Tile **) malloc(rows*sizeof(Tile*));
    
    for (int i=0; i<rows; i++){
        g->board[i] = (Tile *) malloc(cols*sizeof(Tile));
    }
    for (int i=0; i<rows; i++) {
        for (int j=0; j<cols;j++ ) {
//  initialize the attribute for the board.            
            g->board[i][j].numOfMines = FALSE;
            g->board[i][j].isMine = FALSE;
            g->board[i][j].isVisible = FALSE;
        }
    }
//  put random mine in the board upon the leve    
    populateMines(g,level);
//  update the tiles with the number of mine around them    
    markNumbers (g);
    return TRUE;
}

void clickTile(GameBoard *g, int row, int col){
// the tile is out of board.
    if(row<0 || col<0  )
        return;
    int i = row;
    int j = col;
// the tile is already open
    if( g->board[i][j].isVisible == TRUE)
        return;
// the tile is is flagged remove the flag before
    if( g->board[i][j].isFlagged == TRUE)
        return;
// the tile is minr you loose        
    if( g->board[i][j].isMine == TRUE){
        g->board[i][j].isVisible = TRUE;
        g->isMineClicked = TRUE;
        return;
    }
//  legal tile, open and show the num of mine around.    
    if( g->board[i][j].numOfMines > 0){
        g->board[i][j].isVisible = TRUE;
        g->hiddenTiles--;
        return;
    }
// there is no mine around the tile, open the neighbors    
    if( g->board[i][j].numOfMines==0){
        g->board[i][j].isVisible=TRUE;
        g->hiddenTiles--;
// checking the 8 tiles around the current tile recursive
        if( i>=1 )
            clickTile(g, row-1, col );
          
        if( (i>=1) && (j>=1) )
            clickTile(g, row-1, col-1 ); 
          
        if( (i>=1) && (j<g->cols-1)  )
            clickTile(g, row-1, col+1 ); 
          
        if( j>=1 )
            clickTile(g,row, col-1 );  
          
        if( j<g->cols-1  )
            clickTile(g, row, col+1 ); 
          
        if( (i<g->rows-1) && (j>=1) )
            clickTile(g, row+1, col-1 ); 
          
        if( i<g->rows-1 )
            clickTile(g, row+1, col );  
          
        if( (i<g->rows-1) && (j<g->cols-1) )
            clickTile(g, row+1, col+1 );
        return;
    }
}

void flagTile(GameBoard *g, int row, int col){
//  tile is open do nothing    
    if( g->board[row][col].isVisible == TRUE)
         return;
//  tile is flaffed, remove the flag         
    if( g->board[row][col].isFlagged==TRUE )
        g->board[row][col].isFlagged=FALSE ;
//  the tile is cover, put flag.        
    else  g->board[row][col].isFlagged=TRUE ;
}

void populateMines(GameBoard *g, int level){
//  make random number   
    srand(time(NULL));
//  initialize the  totalMines in 12 precet of the tiles
    if (level == 1)
      g->totalMines = ((g->cols )*(g->rows))* (EASY_LEVEL_PERCENT/(double)100 );
//  initialize the  totalMines in 16 precet of the tiles    
    else if (level == 2)
      g->totalMines = ((g->cols )*(g->rows))* (MEDIUM_LEVEL_PERCENT/(double)100 );
//  initialize the  totalMines in 21 precet of the tiles    
    else if (level == 3)
      g->totalMines = ((g->cols )*(g->rows))* (HARD_LEVEL_PERCENT/(double)100 );

//  put mine in random tiles on the board     
    for (int i=0; i<g->totalMines;i++){
        int randCol = rand () % g->cols;
        int randRow = rand () % g->rows;
//  if the tile is mine already look for other tile        
        if( g->board[randRow][randCol].isMine==TRUE ){
              i--;
        }
        else {
//  initialize the tile to be mine            
            g->board[randRow][randCol].isMine = TRUE ;
            g->board[randRow][randCol].numOfMines=-1;
        }
    }     
}

void markNumbers(GameBoard *g){
// count the mine around the tile    
    int count=0;
    for(int i=0 ;i<g->rows;i++){
        for(int j=0 ;j<g->cols;j++){
//  if the tile is mine          
            if(g->board[i][j].isMine == TRUE){
                g->board[i][j].numOfMines=-1;
            }
            else{
             if( (i>=1) && (g->board[i-1][j].isMine == TRUE) )
             count++;
             if( ((i>=1) && (j>=1)) && (g->board[i-1][j-1].isMine == TRUE) )
             count++;
             if( ((i>=1) && (j<g->cols-1)) && (g->board[i-1][j+1].isMine == TRUE) )
             count++;
             if( (j>=1) && (g->board[i][j-1].isMine == TRUE) )
             count++;
             if( (j<g->cols-1)  && (g->board[i][j+1].isMine == TRUE) )
             count++;
             if( ((i<g->rows-1) && (j>=1)) && (g->board[i+1][j-1].isMine == TRUE) )
             count++;
             if( (i<g->rows-1) && (g->board[i+1][j].isMine == TRUE) )
             count++;
             if( ((i<g->rows-1) && (j<g->cols-1)) && (g->board[i+1][j+1].isMine == TRUE) )
             count++;
             g->board[i][j].numOfMines = count;
          }
           count=0;
        }  
    }  
}

 void printBoard (GameBoard * g, int cursorCoords[2]){
 // array to hold what we gatch frome the keyboard    
    char gm[3];
    gm[0] = ' ';
    gm[1] = ' ';
    gm[2] = '\0';
    
    for(int i=0 ;i<g->rows;i++){
        for(int j=0 ;j<g->cols;j++){
          
            if(g->board[i][j].isFlagged ==TRUE)
                    gm[1]='F'; 
            else if(g->board[i][j].isVisible ==TRUE && g->board[i][j].isMine == TRUE ){
                    gm[1]='M';
                    g->isMineClicked=1;
                }   
            else if(g->board[i][j].isVisible ==0){
                    gm[1]=' ';
                }
            else if (g->board[i][j].isVisible == TRUE && g->board[i][j].isMine == FALSE){
                    gm[1]=(int) 48+g->board[i][j].numOfMines;
            }
            if((i==cursorCoords[0]) && (j==cursorCoords[1]) )
                colorPrint(FG_Red,  BG_Yellow, ATT_Def,gm); 
            else
                colorPrint(FG_Black,  BG_Cyan, ATT_Def,gm);  
        }
        printf("\n");
    }
}         
          
          
          
          
          
          